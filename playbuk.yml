- name: Install docker
  gather_facts: No
  any_errors_fatal: true
  hosts: _ansible_postgresql
  become: true
  vars_files:
    - secret.yml
  tasks:
    - name: upgrade all packages
      ansible.builtin.yum: 
        name: '*'
        state: latest
    # we may need to uninstall any existing docker files from the centos repo first. 
    - name: Remove docker if installed from CentOS repo
      ansible.builtin.yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: removed

  # yum-utils is a collection of tools and programs for managing yum repositories, installing debug packages, source packages, extended information from repositories and administration.
    - name: Install yum utils
      ansible.builtin.yum:
        name: "yum-utils"
        state: latest

  # set up the repository (`yum_repository` modülü de kullanılabilir.)
    - name: Add Docker repo
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo

    - name: Install Docker
      ansible.builtin.package:
        name: docker-ce
        state: latest

    - name: Add user ec2-user to docker group
      ansible.builtin.user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Start Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    # - name: copy files to the postgresql node
    #   ansible.builtin.copy:
    #     src: /home/ec2-user/ansible-project/postgres/
    #     dest: /home/ec2-user/postgresql

# # Remove the container if it exists
#     - name: remove cla_postgre container
#       community.docker.docker_container:
#         name: cla_postgre
#         state: absent
#         force_kill: true

# # Remove the image if it exists
#     - name: remove clarusway/postgre image
#       community.docker.docker_image:
#         name: clarusway/postgre
#         state: absent

    # - name: build container image
    #   community.docker.docker_image:
    #     name: clarusway/postgre
    #     build:
    #       path: /home/ec2-user/postgresql
    #     source: build
    #     state: present
    #   register: image_info

    # - name: print the image info
    #   debug:
    #     var: image_info

    # - name: Launch postgresql docker container
    #   community.docker.docker_container:
    #     name: cla_postgre
    #     image: clarusway/postgre
    #     state: started
    #     ports: 
    #     - "5432:5432"
    #     env:
    #       POSTGRES_PASSWORD: "{{password}}"
    #     volumes:
    #       - /db-data:/var/lib/postgresql/data
    #   register: container_info
    
    # - name: print the container info
    #   debug:
    #     var: container_info



- name: Install docker
  gather_facts: No
  any_errors_fatal: true
  hosts: _ansible_nodejs
  become: true
  tasks:
    - name: upgrade all packages
      ansible.builtin.yum: 
        name: '*'
        state: latest
    # we may need to uninstall any existing docker files from the centos repo first. 
    - name: Remove docker if installed from CentOS repo
      ansible.builtin.yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: removed

  # yum-utils is a collection of tools and programs for managing yum repositories, installing debug packages, source packages, extended information from repositories and administration.
    - name: Install yum utils
      ansible.builtin.yum:
        name: "yum-utils"
        state: latest

  # set up the repository (`yum_repository` modülü de kullanılabilir.)
    - name: Add Docker repo
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo

    - name: Install Docker
      ansible.builtin.package:
        name: docker-ce
        state: latest

    - name: Add user ec2-user to docker group
      ansible.builtin.user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Start Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

  #   - name: copy files to the nodejs node
  #     ansible.builtin.copy:
  #       src: /home/ec2-user/ansible-project/nodejs/
  #       dest: /home/ec2-user/nodejs

  # # Remove the container if it exists
  #   - name: remove cla_nodejs container
  #     community.docker.docker_container:
  #       name: cla_nodejs
  #       state: absent
  #       force_kill: true

  # # Remove the image if it exists
  #   - name: remove clarusway/nodejs image
  #     community.docker.docker_image:
  #       name: clarusway/nodejs
  #       state: absent

  #   - name: build container image
  #     community.docker.docker_image:
  #       name: clarusway/nodejs
  #       build:
  #         path: /home/ec2-user/nodejs
  #       source: build
  #       state: present
  #     register: image_info

  #   - name: print the image info
  #     debug:
  #       var: image_info

  #   - name: Launch nodejs docker container
  #     community.docker.docker_container:
  #       name: cla_nodejs
  #       image: clarusway/nodejs
  #       state: started
  #       ports: 
  #       - "5000:5000"
  #     register: container_info
    
  #   - name: print the container info
  #     debug:
  #       var: container_info



- name: Install docker
  gather_facts: No
  any_errors_fatal: true
  hosts: _ansible_react
  become: true
  tasks:
    - name: upgrade all packages
      yum: 
        name: '*'
        state: latest
    # we may need to uninstall any existing docker files from the centos repo first.
    - name: Remove docker if installed from CentOS repo
      yum:
        name: "{{ item }}"
        state: removed
      with_items:
        - docker
        - docker-client
        - docker-client-latest
        - docker-common
        - docker-latest
        - docker-latest-logrotate
        - docker-logrotate
        - docker-engine
    - name: Install yum utils
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - yum-utils
    - name: Add Docker repo
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
    - name: Install Docker
      package:
        name: docker-ce
        state: latest
    - name: Install pip
      package:
        name: python3-pip
        state: present
        update_cache: true
    - name: Install docker sdk
      pip:
        name: docker
    - name: Add user ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes
    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    # # at this point do not forget change DB_HOST env variable for postgresql node
    # - name: copy files to the nodejs node
    #   copy:
    #     src: /home/ec2-user/ansible-project/react/
    #     dest: /home/ec2-user/react
    # - name: copy the Dockerfile
    #   copy:
    #     src: /home/ec2-user/ansible-project/react/Dockerfile
    #     dest: /home/ec2-user/react
    # - name: remove cla_react container and clacw/react image if exists
    #   shell: "docker ps -q --filter 'name=cla_react' && docker stop cla_react && docker rm -fv cla_react && docker image rm -f clacw/react || echo 'Not Found'"
    # - name: build container image
    #   docker_image:
    #     name: clacw/react
    #     build:
    #       path: /home/ec2-user/react
    #     source: build
    #     state: present
    # - name: Launch react docker container
    #   docker_container:
    #     name: cla_react
    #     image: clacw/react
    #     state: started
    #     ports:
    #     - "3000:3000"
    #   register: container_info
    # - name: Print the container_info
    #   debug:
    #     msg: "{{ container_info }}"